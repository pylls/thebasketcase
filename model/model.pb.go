// Code generated by protoc-gen-go.
// source: model.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	Req
	Browse
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	WorkerID string  `protobuf:"bytes,1,opt,name=WorkerID,json=workerID" json:"WorkerID,omitempty"`
	Browse   *Browse `protobuf:"bytes,2,opt,name=Browse,json=browse" json:"Browse,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetBrowse() *Browse {
	if m != nil {
		return m.Browse
	}
	return nil
}

// Browse is a work item.
// If ID == "", then no work has been done (request) or is needed (reply).
type Browse struct {
	ID      string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	URL     string `protobuf:"bytes,2,opt,name=URL,json=uRL" json:"URL,omitempty"`
	Timeout int64  `protobuf:"varint,3,opt,name=Timeout,json=timeout" json:"Timeout,omitempty"`
	Data    []byte `protobuf:"bytes,4,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *Browse) Reset()                    { *m = Browse{} }
func (m *Browse) String() string            { return proto.CompactTextString(m) }
func (*Browse) ProtoMessage()               {}
func (*Browse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Req)(nil), "model.Req")
	proto.RegisterType((*Browse)(nil), "model.Browse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gather service

type GatherClient interface {
	Work(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Browse, error)
}

type gatherClient struct {
	cc *grpc.ClientConn
}

func NewGatherClient(cc *grpc.ClientConn) GatherClient {
	return &gatherClient{cc}
}

func (c *gatherClient) Work(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Browse, error) {
	out := new(Browse)
	err := grpc.Invoke(ctx, "/model.Gather/Work", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gather service

type GatherServer interface {
	Work(context.Context, *Req) (*Browse, error)
}

func RegisterGatherServer(s *grpc.Server, srv GatherServer) {
	s.RegisterService(&_Gather_serviceDesc, srv)
}

func _Gather_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Gather/Work",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherServer).Work(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gather_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Gather",
	HandlerType: (*GatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Work",
			Handler:    _Gather_Work_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4a, 0xc5, 0x30,
	0x10, 0x45, 0x4d, 0x13, 0xf3, 0x5e, 0xa7, 0x2a, 0x32, 0xab, 0xd0, 0x55, 0xa8, 0x08, 0xd9, 0xd8,
	0x45, 0xfd, 0x03, 0x29, 0xa8, 0xd0, 0xd5, 0xa0, 0xe8, 0x36, 0xa5, 0x01, 0x8b, 0x96, 0xd8, 0x98,
	0xd2, 0xdf, 0x17, 0xd3, 0x2a, 0xb8, 0x1a, 0xce, 0x30, 0x73, 0x39, 0x17, 0x8a, 0xc9, 0x0f, 0xee,
	0xa3, 0xfe, 0x0c, 0x3e, 0x7a, 0x3c, 0x4d, 0x50, 0x3d, 0x00, 0x27, 0x37, 0x63, 0x09, 0xc7, 0x17,
	0x1f, 0xde, 0x5d, 0x78, 0x6c, 0x15, 0xd3, 0xcc, 0xe4, 0x74, 0x5c, 0x77, 0xc6, 0x6b, 0x90, 0x77,
	0xc1, 0xaf, 0x5f, 0x4e, 0x65, 0x9a, 0x99, 0xa2, 0x39, 0xaf, 0xb7, 0x9c, 0x6d, 0x49, 0xb2, 0x4f,
	0xb3, 0x7a, 0xfd, 0x3d, 0xc3, 0x0b, 0xc8, 0xfe, 0x62, 0xb2, 0xb1, 0xc5, 0x4b, 0xe0, 0xcf, 0xd4,
	0xa5, 0xef, 0x9c, 0xf8, 0x42, 0x1d, 0x2a, 0x38, 0x3c, 0x8d, 0x93, 0xf3, 0x4b, 0x54, 0x5c, 0x33,
	0xc3, 0xe9, 0x10, 0x37, 0x44, 0x04, 0xd1, 0xda, 0x68, 0x95, 0xd0, 0xcc, 0x9c, 0x91, 0x18, 0x6c,
	0xb4, 0xcd, 0x0d, 0xc8, 0x7b, 0x1b, 0xdf, 0x5c, 0xc0, 0x2b, 0x10, 0x3f, 0x9a, 0x08, 0xbb, 0x02,
	0xb9, 0xb9, 0xfc, 0xaf, 0x53, 0x9d, 0xf4, 0x32, 0x15, 0xbc, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x19, 0xd5, 0x04, 0xf7, 0xef, 0x00, 0x00, 0x00,
}
